#!/usr/bin/env ruby

require "colorize"
require "mspac"
require "optparse"

class MsPacExit
    GOOD = 0
    INVALID_OPTION = 1
    INVALID_ARGUMENT = 2
    MISSING_ARGUMENT = 3
    INVALID_OPERATION = 4
    MULTIPLE_OPERATIONS = 5
    EXCEPTION = 6
end

class Operation
    LIST_CACHED = 1
    LIST_INSTALLED = 2
    LIST_PELLETS = 3
    LOCK = 4
    REMOVE = 5
    SYNC = 6
    UNLOCK = 7
end

def parse(args)
    options = Hash.new
    options["operation"] = nil

    # Sync options
    options["clean"] = false
    options["force"] = false
    options["refresh"] = false
    options["regex"] = false
    options["upgrade"] = false

    # Remove options
    options["nosave"] = false

    parser = OptionParser.new do |opts|
        opts.banner = [
            "Usage: #{File.basename($0)} <operation> [OPTIONS]",
            "[pellets]"
        ].join(" ")

        opts.on("", "OPERATIONS")

        opts.on("-h", "--help", "Display this help message") do
            puts opts
            exit
        end

        opts.on("--list-cached", "List cached pellets") do
            options["operation"] = Operation::LIST_CACHED
        end

        opts.on("--list-installed", "List installed pellets") do
            options["operation"] = Operation::LIST_INSTALLED
        end

        opts.on("--list-pellets", "List available pellets") do
            options["operation"] = Operation::LIST_PELLETS
        end

        opts.on(
            "-L",
            "--lock",
            "Lock a pellet at it's current version"
        ) do
            if (options["operation"])
                puts opts
                exit MsPacExit::MULTIPLE_OPERATIONS
            end
            options["operation"] = Operation::LOCK
        end

        opts.on("-R", "--remove", "Remove pellets") do
            if (options["operation"])
                puts opts
                exit MsPacExit::MULTIPLE_OPERATIONS
            end
            options["operation"] = Operation::REMOVE
        end

        opts.on("-S", "--sync", "Synchronize pellets") do
            if (options["operation"])
                puts opts
                exit MsPacExit::MULTIPLE_OPERATIONS
            end
            options["operation"] = Operation::SYNC
        end

        opts.on("-U", "--unlock", "Unlock a pellet") do
            if (options["operation"])
                puts opts
                exit MsPacExit::MULTIPLE_OPERATIONS
            end
            options["operation"] = Operation::UNLOCK
        end

        opts.on("", "SYNC OPTIONS")

        opts.on(
            "-c",
            "--clean",
            "Remove pellets that are no longer installed",
            "from the cache"
        ) do
            options["clean"] = true
        end

        opts.on(
            "-f",
            "--force",
            "Force a reinstall/recompilation of the pellet"
        ) do
            options["force"] = true
        end

        opts.on(
            "-s",
            "--search",
            "Search each pellet for names matching the",
            "provided regex and display them"
        ) do
            options["regex"] = true
        end

        opts.on("-u", "--sysupgrade", "Upgrade all pellets") do
            options["upgrade"] = true
        end

        opts.on("-y", "--refresh", "Refresh available pellets") do
            options["refresh"] = true
        end

        opts.on("", "REMOVE OPTIONS")

        opts.on("-n", "--nosave", "Completely remove pellet") do
            options["nosave"] = true
        end
    end

    begin
        parser.parse!
    rescue OptionParser::InvalidOption => e
        puts e.message
        puts parser
        exit MsPacExit::INVALID_OPTION
    rescue OptionParser::InvalidArgument => e
        puts e.message
        puts parser
        exit MsPacExit::INVALID_ARGUMENT
    rescue OptionParser::MissingArgument => e
        puts e.message
        puts parser
        exit MsPacExit::MISSING_ARGUMENT
    end

    if (!validate(options))
        puts parser
        exit MsPacExit::INVALID_OPERATION
    end

    options["pellets"] = args

    return options
end

def validate(options)
    case options["operation"]
    when Operation::LIST_CACHED
        if (
            options["clean"] ||
            options["force"] ||
            options["nosave"] ||
            options["refresh"] ||
            options["regex"] ||
            options["upgrade"]
        )
            return false
        end
    when Operation::LIST_INSTALLED
        if (
            options["clean"] ||
            options["force"] ||
            options["nosave"] ||
            options["refresh"] ||
            options["regex"] ||
            options["upgrade"]
        )
            return false
        end
    when Operation::LIST_PELLETS
        if (
            options["clean"] ||
            options["force"] ||
            options["nosave"] ||
            options["refresh"] ||
            options["regex"] ||
            options["upgrade"]
        )
            return false
        end
    when Operation::LOCK
        if (
            options["clean"] ||
            options["force"] ||
            options["nosave"] ||
            options["refresh"] ||
            options["regex"] ||
            options["upgrade"]
        )
            return false
        end
    when Operation::REMOVE
        if (
            options["clean"] ||
            options["force"] ||
            options["refresh"] ||
            options["regex"] ||
            options["upgrade"]
        )
            return false
        end
    when Operation::SYNC
        return false if (options["nosave"])

        if (options["clean"])
            if (
                options["force"] ||
                options["regex"] ||
                options["upgrade"]
            )
                return false
            end
        elsif (options["force"])
            if (
                options["clean"] ||
                options["regex"] ||
                options["upgrade"]
            )
                return false
            end
        elsif (options["regex"])
            if (
                options["clean"] ||
                options["force"] ||
                options["upgrade"]
            )
                return false
            end
        elsif (options["upgrade"])
            if (
                options["clean"] ||
                options["force"] ||
                options["regex"]
            )
                return false
            end
        end
    when Operation::UNLOCK
        if (
            options["clean"] ||
            options["force"] ||
            options["nosave"] ||
            options["refresh"] ||
            options["regex"] ||
            options["upgrade"]
        )
            return false
        end
    else
        return false
    end

    return true
end

# Parse CLI args
options = parse(ARGV)

begin
    mspac = MsPac.new

    case options["operation"]
    when Operation::LIST_CACHED
        puts mspac.cached
    when Operation::LIST_INSTALLED
        puts mspac.installed
    when Operation::LIST_PELLETS
        puts mspac.pellets
    when Operation::LOCK
        mspac.lock(options["pellets"])
    when Operation::REMOVE
        mspac.remove(options["pellets"], options["nosave"])
    when Operation::SYNC
        mspac.refresh if (options["refresh"])

        if (options["clean"])
            mspac.clean
        elsif (options["regex"])
            mspac.search(options["pellets"].join(" "))
        elsif (options["upgrade"])
            mspac.upgrade
        else
            unless (
                options["refresh"] &&
                (options["pellets"].nil? || options["pellets"].empty?)
            )
                mspac.install(options["pellets"], options["force"])
            end
        end
    when Operation::UNLOCK
        mspac.unlock(options["pellets"])
    end
    exit MsPacExit::GOOD
rescue MsPac::Error => e
    puts e.message.red
    exit MsPacExit::EXCEPTION
rescue Interrupt => e
    # ^C
    puts
end
